/*  * ==============================================================================   * Copyright (c) 2019-2020 EmachineLabs Corp. All Rights Reserved.  *   * @Author : Jitender Hooda   *   ==============================================================================  */  using System.Collections; using System.Collections.Generic; using UnityEngine; using System.IO; using UnityEditor; using System; //using Vuforia; using UnityEngine.Video; using UnityEngine.Networking; using UnityEngine.UI; using System.Text.RegularExpressions;  using Newtonsoft.Json.Converters; using Newtonsoft.Json; using Newtonsoft; using Newtonsoft.Json.Linq; using System.Reflection;

public class UIUtility {     //public static UIApplication getUIApplication(string directURL)     //{     //    UIApplication uiApplication = null;     //    try     //    {     //        var directResponse = WebFunctions.Get(directURL);     //        //Debug.Log("<color=green> $$$$$$$$$$$$$$$$$ directResponse.text is  : </color>" + directResponse.text);     //        if (directResponse.error != null)
    //        {
    //            Debug.Log("<color=red> $$$$$$$$$$$$$$$$$ directResponse.error  : </color>");     //            return null;     //        }     //        else
    //        {
    //            uiApplication = JsonUtility.FromJson<UIApplication>(directResponse.text);     //            var t = "";     //        }     //    }     //    catch (Exception e)     //    {     //        JituMessageBox.DisplayMessageBox("Server Error Status", "There is an UI Builder Issue.\n\n Please contact your administrator.\n\nApologies for the inconvenience.", true, null);     //        Debug.Log("<color=red> @@@@@@@@@@ An error occurred in UIUtility.getUIApplication: </color>" + e.ToString());     //    }     //    return uiApplication;     //}      public static UIApplication getUIApplicationUpdated(string directURL)     {         UIApplication uiApplication = null;         try         {             var directResponse = WebFunctions.Get(directURL);             //Debug.Log("<color=green> $$$$$$$$$$$$$$$$$ directResponse.text is  : </color>" + directResponse.text);             if (directResponse.error != null)
            {
                Debug.Log("<color=red> $$$$$$$$$$$$$$$$$ directResponse.error  : </color>");                 return null;             }             else
            {
                uiApplication = JsonConvert.DeserializeObject<UIApplication>(directResponse.text);
                var t = "";
            }         }         catch (Exception e)         {             JituMessageBox.DisplayMessageBox("Server Error Status", "There is an UI Builder Issue.\n\n Please contact your administrator.\n\nApologies for the inconvenience.", true, null);             Debug.Log("<color=red> @@@@@@@@@@ An error occurred in UIUtility.getUIApplication: </color>" + e.ToString());         }         return uiApplication;     }      /// <summary>     /// To get list of Json Objects     /// </summary>     /// <returns>The json object array.</returns>     /// <param name="jsonString">Json string.</param>     /// <param name="handle">Handle.</param>     public static string[] GetJsonObjectArray(string jsonString, string handle)     {         string pattern = "\"" + handle + "\"\\s*:\\s*\\[\\s*{";          Regex regx = new Regex(pattern);          List<string> jsonObjList = new List<string>();          Match match = regx.Match(jsonString);          if (match.Success)         {             int squareBracketCount = 1;             int curlyBracketCount = 1;             int startOfObjArray = match.Index + match.Length;             int i = startOfObjArray;             while (true)             {                 if (jsonString[i] == '[') squareBracketCount++;                 else if (jsonString[i] == ']') squareBracketCount--;                  int startOfObj = i;                 for (i = startOfObj; curlyBracketCount > 0; i++)                 {                     if (jsonString[i] == '{') curlyBracketCount++;                     else if (jsonString[i] == '}') curlyBracketCount--;                 }                 jsonObjList.Add("{" + jsonString.Substring(startOfObj, i - startOfObj));                  // continue with the next array element or return object array if there is no more left                 while (jsonString[i] != '{')                 {                     if (jsonString[i] == ']' && squareBracketCount == 1)                     {                         return jsonObjList.ToArray();                     }                     i++;                 }                 curlyBracketCount = 1;                 i++;             }         }         return jsonObjList.ToArray();     }      public static string GetJsonObject(string jsonString, string handle)     {         string pattern = "\"" + handle + "\"\\s*:\\s*\\{";         Regex regx = new Regex(pattern);         Match match = regx.Match(jsonString);          if (match.Success)         {             int bracketCount = 1;             int i;             int startOfObj = match.Index + match.Length;             for (i = startOfObj; bracketCount > 0; i++)             {                 if (jsonString[i] == '{') bracketCount++;                 else if (jsonString[i] == '}') bracketCount--;             }             return "{" + jsonString.Substring(startOfObj, i - startOfObj);         }         return null;     }       private static Dictionary<string, object> deserializeToDictionary(string jo)     {         var values = JsonConvert.DeserializeObject<Dictionary<string, object>>(jo);         var values2 = new Dictionary<string, object>();         foreach (KeyValuePair<string, object> d in values)         {             values2.Add(d.Key, d.Value);         }         return values2;     }      private static string getKeyValuefromJson(string key, string jsonString)     {         string keyValue = null;         var values = JsonConvert.DeserializeObject<Dictionary<string, object>>(jsonString);         var values2 = new Dictionary<string, object>();         foreach (KeyValuePair<string, object> d in values)         {             values2.Add(d.Key, d.Value);             if (d.Key.Equals(key))             {                 keyValue = d.Value.ToString();                 break;             }         }         return keyValue;     }       // To be removed and used from ARUtility after merging the UI Screen into main app      public static TargetImage getFullTargetImageFromUID(String UniqueTargetId)     {         TargetImage targetImageObject = null;         try         {             string directURL = GlobalVariables.REST_SERVER + GlobalVariables.GET_IMAGE_JSON_API + UniqueTargetId;             var directResponse = WebFunctions.Get(directURL);             targetImageObject = JsonUtility.FromJson<TargetImage>(directResponse.text);              //Get Buttons =====================================             string[] buttonStrings = GetJsonObjectArray(directResponse.text, "buttons");             ButtonDetails[] buttonDetails = new ButtonDetails[buttonStrings.Length];             int i = 0;             foreach (string jsonObj in buttonStrings)             {                 buttonDetails[i] = JsonUtility.FromJson<ButtonDetails>(jsonObj);                 String iconValueString = GetJsonObject(jsonObj, "valueParameters");                 IconValueParameters iconValueParameters = null;                 if (!string.IsNullOrEmpty(iconValueString))                 {                     iconValueParameters = JsonUtility.FromJson<IconValueParameters>(iconValueString);                     iconValueParameters.iconHeaders = GetJsonObject(iconValueString, "iconHeaders");                     iconValueParameters.iconBody = GetJsonObject(iconValueString, "iconBody");                     iconValueParameters.parameters = GetJsonObject(iconValueString, "params");                 }                 buttonDetails[i].valueParameters = iconValueParameters;                  i++;             }             targetImageObject.buttons = buttonDetails;              //Get Videos =====================================             string[] VideoStrings = GetJsonObjectArray(directResponse.text, "videos");             VideoData[] videos = new VideoData[VideoStrings.Length];             i = 0;             foreach (string jsonObj in VideoStrings)             {                 videos[i] = JsonUtility.FromJson<VideoData>(jsonObj);                 i++;             }             targetImageObject.videos = videos;               //Get Documents =====================================             string[] DocStrings = GetJsonObjectArray(directResponse.text, "docs");             DocumentData[] docs = new DocumentData[DocStrings.Length];             i = 0;             foreach (string jsonObj in DocStrings)             {                 docs[i] = JsonUtility.FromJson<DocumentData>(jsonObj);                 i++;             }             targetImageObject.docs = docs;             //Get Notes =====================================             string[] NotesStrings = GetJsonObjectArray(directResponse.text, "notes");             NotesData[] notes = new NotesData[NotesStrings.Length];             i = 0;             foreach (string jsonObj in NotesStrings)             {                 notes[i] = JsonUtility.FromJson<NotesData>(jsonObj);                 i++;             }             targetImageObject.notes = notes;         }         catch (Exception e)         {             Debug.Log("<color=red> @@@@@@@@@@ An error occurred in getFullTargetImageFromUID: </color>" + e.ToString());         }          return targetImageObject;     }      public static void initializeGlobalVariables(TargetImage targetImageObject)     {         if (targetImageObject != null)         {             GlobalVariables.targetImageObject = targetImageObject;             GlobalVariables.VUFORIA_UNIQUE_ID = targetImageObject.uniqueID;             GlobalVariables.TARGET_IMAGE_DBX_URL = targetImageObject.dbxImageURL;             GlobalVariables.ASPECT_RATIO = float.Parse(targetImageObject.aspectRatio);         }     }

    public static void initGlobalVariables()     {
        //Debug.Log("<color=green> $$$$$$$$$$$$$$$$$ initGlobalVariables starting  : </color>");         //var directResponse = WebFunctions.Get("https://ar-dev.emachinelabs.com/getCellProperties");
        var directResponse = WebFunctions.Get(GlobalVariables.Cell_Properties);
        //Debug.Log("<color=red> $$$$$$$$$$$$$$$$$ directResponse.text is  : </color>" + directResponse.text);
        if (directResponse.error != null)
        {
            Debug.Log("<color=red> $$$$$$$$$$$$$$$$$ directResponse.error  : </color>");
        }
        else
        {
            //Debug.Log("<color=yellow> $$$$$$$$$$$$$$$$$ initGlobalVariables else  : </color>");
            FieldInfo[] property = typeof(GlobalVariables).GetFields(BindingFlags.Public | BindingFlags.Static);
            //Debug.Log("<color=yellow> $$$$$$$$$$$$$$$$$ initGlobalVariables else, property length  : </color>" + property.Length);
            GlobalVariablesPoJo variables = JsonUtility.FromJson<GlobalVariablesPoJo>(directResponse.text);
            //Debug.Log("<color=yellow> $$$$$$$$$$$$$$$$$ initGlobalVariables else, directResponse.text  : </color>" + directResponse.text);
            Type _type = Type.GetType("GlobalVariables");

            GlobalVariables.DROPBOX_TOCKEN = variables.DROPBOX_TOCKEN;
            GlobalVariables.MasterJsonURL = variables.MasterJsonURL;
            GlobalVariables.DROPBOX_STAGING_FOLDER = variables.DROPBOX_STAGING_FOLDER;
            GlobalVariables.DROPBOX_EXPERIENCE_FOLDER_INFO = variables.DROPBOX_EXPERIENCE_FOLDER_INFO;
            GlobalVariables.REST_SERVER = variables.REST_SERVER;
            GlobalVariables.GET_IMAGE_JSON_API = variables.GET_IMAGE_JSON_API;
            GlobalVariables.UI_API = variables.UI_API;
            //GlobalVariables.VUFORIA_UNIQUE_ID = variables.VUFORIA_UNIQUE_ID;
            GlobalVariables.INFO_DELIMETER = variables.INFO_DELIMETER;
            GlobalVariables.INFO_BUTTON_CLICKED = variables.INFO_BUTTON_CLICKED;
            //GlobalVariables.VIDEO_BUTTON_CLICKED = variables.VIDEO_BUTTON_CLICKED;
            GlobalVariables.INFO_PANEL_BUTTON_CLICKED = variables.INFO_PANEL_BUTTON_CLICKED;
            GlobalVariables.ASPECT_RATIO = variables.ASPECT_RATIO;
            GlobalVariables.TRACKING_FOUND = variables.TRACKING_FOUND;
            GlobalVariables.kickOff = variables.kickOff;
            GlobalVariables.isPublic = variables.isPublic;
            GlobalVariables.healthCounter = variables.healthCounter;
            GlobalVariables.fontFactor = variables.fontFactor;
        }     }

}  